@page "/Clientes"
@inject IJSRuntime JSRuntime
<h3>Clientes (@Clientes.Count)</h3>

@if (!ShowForm)
{
    <div class="mb-2">
        <button class="btn btn-success" @onclick="MostrarFormulario">
            <span class="bi bi-plus"></span> Agregar
        </button>
    </div>
}

<div class="container">
    @if (ShowForm)
    {
        <EditForm Model="request" OnValidSubmit="EnviarCliente">
            <div class="mb-3 input-group">
                <label class="input-group-text">Nombre</label>
                <InputText class="form-control" @bind-Value="@request.Nombre"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Apellido</label>
                <InputText class="form-control" @bind-Value="@request.Apellido"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Dirección</label>
                <InputText class="form-control" @bind-Value="@request.Direccion"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Teléfono</label>
                <InputText class="form-control" @bind-Value="@request.Telefono"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Correo Electrónico</label>
                <InputText class="form-control" @bind-Value="@request.CorreoElectronico"></InputText>
            </div>
            <div class="btn-group">
                <button type="submit" class="btn btn-outline-success">
                    <span class="bi bi-check"></span> @GetFormButtonLabel()
                </button>
                <button type="button" class="btn btn-outline-danger" @onclick="Cancelar">
                    <span class="bi bi-x"></span> Cancelar
                </button>
            </div>
        </EditForm>
        <br />
    }

    @if (!ShowForm)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Direccion</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cliente in Clientes)
                {
                    <tr>
                        <td>@cliente.Nombre</td>
                        <td>@cliente.Apellido</td>
                        <td>@cliente.Direccion</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => Seleccionar(cliente.Id)">
                                <span class="bi bi-pencil"></span> Editar
                            </button>
                            <button @onclick="()=>Eliminar(cliente)"
                                    class="btn btn-danger">
                                <span class="bi bi-trash"></span> Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    public bool ShowForm { get; set; } = false;
    public string Filtro { get; set; } = " ";

    public List<ClienteResponse> Clientes { get; set; } = new List<ClienteResponse>();

    public ClienteRequest request { get; set; } = new ClienteRequest();

    private string GetFormButtonLabel()
    {
        return request.Id == 0 ? "Agregar" : "Modificar";
    }

    // Función para limpiar el formulario
    void Cancelar()
    {
        request = new ClienteRequest();
        ShowForm = false;
    }

    async Task CargarClientes()
    {
        var resultado = await ClienteServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Clientes = resultado.Data!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
    }

    // Método para agregar o actualizar el cliente
    public async Task EnviarCliente()
    {
        // Validar campos obligatorios
        if (string.IsNullOrWhiteSpace(request.Nombre) ||
            string.IsNullOrWhiteSpace(request.Apellido) ||
            string.IsNullOrWhiteSpace(request.Direccion) ||
            string.IsNullOrWhiteSpace(request.Telefono) ||
            string.IsNullOrWhiteSpace(request.CorreoElectronico))
        {
            // Mostrar mensaje de error si algún campo está vacío
            // Puedes utilizar estilos de Bootstrap para mostrar el mensaje
            // Aquí se muestra un ejemplo utilizando una alerta de Bootstrap:
            <div class="alert alert-danger" role="alert">
                Por favor completa todos los campos.
            </div>
            return;
        }

        // Mostrar mensaje de confirmación
        var confirmResult = await JSRuntime.InvokeAsync<bool>("confirm", new object?[] { "¿Estás seguro de realizar esta acción?" });

        if (confirmResult)
        {
            if (request.Id == 0)
            {
                // Registrar el cliente
                var r = await ClienteServices.Crear(request);
                if (r.Success)
                {
                    Cancelar();
                    await CargarClientes();
                    StateHasChanged();
                    // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                    <div class="alert alert-success" role="alert">
                        El cliente se ha agregado correctamente.
                    </div>
                }
            }
            else
            {
                // Actualizar el cliente
                var r = await ClienteServices.Modificar(request);
                if (r.Success)
                {
                    Cancelar();
                    await CargarClientes();
                    StateHasChanged();
                    // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                    <div class="alert alert-success" role="alert">
                        El cliente se ha actualizado correctamente.
                    </div>
                }
                else if (request.Id < 0)
                {
                    // Eliminar el cliente
                    var resultado = await ClienteServices.Eliminar(new ClienteRequest { Id = -request.Id });
                    if (resultado.Success)
                    {
                        Cancelar();
                        await CargarClientes();
                        StateHasChanged();
                        // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                        <div class="alert alert-success" role="alert">
                            El cliente se ha eliminado correctamente.
                        </div>
                    }
                }
            }
        }
    }

    public void Seleccionar(int Id)
    {
        ShowForm = true;
        request = Clientes.FirstOrDefault(c => c.Id == Id)?.ToRequest() ?? new ClienteRequest();
    }

    private void MostrarFormulario()
    {
        ShowForm = true;
    }

    public async Task Eliminar(ClienteResponse cliente)
    {
        var confirmResult = await JSRuntime.InvokeAsync<bool>("confirm", new object?[] { "¿Estás seguro de eliminar este cliente?" });

        if (confirmResult)
        {
            var resultado = await ClienteServices.Eliminar(cliente.ToRequest());
            if (resultado.Success)
            {
                await CargarClientes();
                StateHasChanged();
                // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                <div class="alert alert-success" role="alert">
                    El cliente se ha eliminado correctamente.
                </div>
            }
        }
    }
}


