@page "/productos"
@inject IJSRuntime JSRuntime

<h3>Productos (@MyProperty.Count)</h3>

@if (!ShowForm)
{
    <div class="mb-2">
        <button class="btn btn-success" @onclick="MostrarFormulario">
            <span class="oi oi-plus" aria-hidden="true"></span> Agregar
        </button>
    </div>
}

<div class="container">
    @if (ShowForm)
    {
        <EditForm Model="request" OnValidSubmit="Enviarproducto">
            <div class="mb-3 input-group">
                <label class="input-group-text">Nombre</label>
                <InputText class="form-control" @bind-Value="@request.Nombre"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Descripcion</label>
                <InputText class="form-control" @bind-Value="@request.Descripcion"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Categoria</label>
                <InputText class="form-control" @bind-Value="@request.Categoria"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Marca</label>
                <InputText class="form-control" @bind-Value="@request.Marca"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Modelo</label>
                <InputText class="form-control" @bind-Value="@request.Modelo"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">PrecioDeVenta</label>
                <InputNumber class="form-control" @bind-Value="@request.PrecioDeVenta"></InputNumber>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">PrecioDeCompra</label>
                <InputNumber class="form-control" @bind-Value="@request.PrecioDeCompra"></InputNumber>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Cantidad</label>
                <InputNumber class="form-control" @bind-Value="@request.CantidadEnInventario"></InputNumber>
            </div>

            <div class="btn-group">
                <button type="submit" class="btn btn-outline-success">
                    <span class="oi oi-check" aria-hidden="true"></span> @GetFormButtonLabel()
                </button>

                <button type="button" class="btn btn-outline-danger" @onclick="Cancelar">
                    <span class="oi oi-x" aria-hidden="true"></span> Cancelar
                </button>
            </div>
        </EditForm>
        <br />
    }

    @if (!ShowForm)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    @*<th>Categoria</th>
                    <th>Marca</th>
                    <th>Modelo</th>*@
                    <th>Precio Venta</th>
                    <th>Cantidad</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var producto in MyProperty)
                {
                    <tr>
                        <td>@producto.Nombre</td>
                        @*<td>@producto.Categoria</td>
                        <td>@producto.Marca</td>
                        <td>@producto.Modelo</td>*@
                        <td>@producto.PrecioDeVenta</td>
                        <td>@producto.CantidadEnInventario</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => Seleccionar(producto.Id)">
                                <span class="oi oi-pencil"></span> Editar
                            </button>
                            <button @onclick="() => MostrarDetalles(producto.Id)" class="btn btn-primary">
                                <span class="oi oi-eye"></span> Detalles
                            </button>
                            <button @onclick="() => Eliminar(producto.ToRequest())" class="btn btn-danger">
                                <span class="oi oi-trash"></span> Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@if (ShowDetails)
{
    @if (selectedProducto != null)
    {
        <div class="card mt-3">
            <div class="card-body">
                <h5 class="card-title">Detalles del producto</h5>
                <p><strong>Nombre:</strong> @selectedProducto.Nombre</p>
                <p><strong>Descripción:</strong> @selectedProducto.Descripcion</p>
                <p><strong>Categoría:</strong> @selectedProducto.Categoria</p>
                <p><strong>Marca:</strong> @selectedProducto.Marca</p>
                <p><strong>Modelo:</strong> @selectedProducto.Modelo</p>
                <p><strong>Precio de Venta:</strong> @selectedProducto.PrecioDeVenta</p>
                <p><strong>Cantidad en Inventario:</strong> @selectedProducto.CantidadEnInventario</p>
               
               
                
                <button class="btn btn-danger" @onclick="OcultarDetalles">
                    <span class="oi oi-x"></span> Cerrar
                </button>
            </div>
        </div>
    }

}

@code
{
    public bool ShowForm { get; set; } = false;
    public bool ShowDetails { get; set; } = false;
    public string Filtro { get; set; } = "";
    public List<ProductoResponse> MyProperty { get; set; } = new List<ProductoResponse>();
    public ProductoRequest request { get; set; } = new ProductoRequest();
    public ProductoResponse selectedProducto { get; set; } = new ProductoResponse();

    private string GetFormButtonLabel()
    {
        return request.Id == 0 ? "Agregar" : "Modificar";
    }

    // Función para limpiar el formulario
    void Cancelar()
    {
        request = new ProductoRequest();
        ShowForm = false;
    }

    async Task CargarProductos()
    {
        var resultado = await ProductoServices.Consultar();
        if (resultado.Success)
        {
            MyProperty = resultado.Data!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    // Método para agregar o actualizar el producto
    public async Task Enviarproducto()
    {
        // Validar campos obligatorios
        if (string.IsNullOrWhiteSpace(request.Nombre) ||
            string.IsNullOrWhiteSpace(request.Descripcion) ||
            string.IsNullOrWhiteSpace(request.Categoria) ||
            string.IsNullOrWhiteSpace(request.Marca) ||
            string.IsNullOrWhiteSpace(request.Modelo) ||
            request.PrecioDeCompra <= 0 ||
            request.PrecioDeVenta <= 0)
        {
            // Mostrar mensaje de error si algún campo está vacío
            await MostrarMensajeError("Por favor completa todos los campos.");
            return;
        }

        // Mostrar mensaje de confirmación
        var confirmResult = await JSRuntime.InvokeAsync<bool>("confirm", new object?[] { "¿Estás seguro de realizar esta acción?" });

        if (confirmResult)
        {
            if (request.Id == 0)
            {
                // Registrar el producto
                var r = await ProductoServices.Crear(request);
                if (r.Success)
                {
                    Cancelar();
                    await CargarProductos();
                    StateHasChanged();
                    // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                    await MostrarMensajeExito("El Producto se ha agregado correctamente.");
                }
            }
            else
            {
                // Actualizar el producto
                var r = await ProductoServices.Modificar(request.Id, request);

                if (r.Success)
                {
                    Cancelar();
                    await CargarProductos();
                    StateHasChanged();
                    // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                    await MostrarMensajeExito("El Producto se ha actualizado correctamente.");
                }
                else if (request.Id < 0)
                {
                    // Eliminar el producto
                    var resultado = await ProductoServices.Eliminar(request.Id);

                    if (resultado.Success)
                    {
                        Cancelar();
                        await CargarProductos();
                        StateHasChanged();
                        // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                        await MostrarMensajeExito("El Producto se ha eliminado correctamente.");
                    }
                }
            }
        }
    }

    async Task MostrarMensajeExito(string mensaje)
    {
        await JSRuntime.InvokeVoidAsync("Swal.fire", "Éxito", mensaje, "success");
    }

    async Task MostrarMensajeError(string mensaje)
    {
        await JSRuntime.InvokeVoidAsync("Swal.fire", "Error", mensaje, "error");
    }

    void MostrarFormulario()
    {
        ShowForm = true;
    }

    void Seleccionar(int id)
    {
        ShowForm = true;
        var producto = MyProperty.FirstOrDefault(p => p.Id == id);
        if (producto != null)
        {
            request = new ProductoRequest
            {
                Id = producto.Id,
                Nombre = producto.Nombre,
                Descripcion = producto.Descripcion,
                Categoria = producto.Categoria,
                Marca = producto.Marca,
                Modelo = producto.Modelo,
                PrecioDeVenta = producto.PrecioDeVenta,
                PrecioDeCompra = producto.PrecioDeCompra,
                CantidadEnInventario = producto.CantidadEnInventario
            };
        }
    }

    async Task Eliminar(ProductoRequest producto)
    {
        // Mostrar mensaje de confirmación
        var confirmResult = await JSRuntime.InvokeAsync<bool>("confirm", new object?[] { "¿Estás seguro de eliminar este producto?" });

        if (confirmResult)
        {
            var resultado = await ProductoServices.Eliminar(producto.Id);

            if (resultado.Success)
            {
                await CargarProductos();
                StateHasChanged();
                // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                await MostrarMensajeExito("El producto se ha eliminado correctamente.");
            }
            else
            {
                // Mostrar mensaje de error utilizando una alerta de Bootstrap:
                await MostrarMensajeError("No se pudo eliminar el producto.");
            }
        }
    }

    void MostrarDetalles(int id)
    {
        selectedProducto = MyProperty.FirstOrDefault(p => p.Id == id);
        if (selectedProducto != null)
        {
            ShowDetails = true;
        }
    }

    void OcultarDetalles()
    {
        ShowDetails = false;
    }
}


