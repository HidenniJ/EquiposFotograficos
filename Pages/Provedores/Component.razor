@page "/proveedores"
@inject IJSRuntime JSRuntime

<h3>Proveedores (@MyProperty.Count)</h3>

@if (!ShowForm)
{
    <div class="mb-2">
        <button class="btn btn-success" @onclick="MostrarFormulario">
            <span class="oi oi-plus" aria-hidden="true"></span> Agregar
        </button>
    </div>

}

<div class="container">
    @if (ShowForm)
    {
        <EditForm Model="request" OnValidSubmit="EnviarCliente">
            <div class="mb-3 input-group">
                <label class="input-group-text">Nombre</label>
                <InputText class="form-control" @bind-Value="@request.Nombre"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Direccion</label>
                <InputText class="form-control" @bind-Value="@request.Direccion"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">Telefono</label>
                <InputText class="form-control" @bind-Value="@request.Telefono"></InputText>
            </div>
            <div class="mb-3 input-group">
                <label class="input-group-text">CorreoElectronico</label>
                <InputText class="form-control" @bind-Value="@request.CorreoElectronico"></InputText>
            </div>

            <div class="btn-group">
                <button type="submit" class="btn btn-outline-success">
                    <span class="oi oi-check" aria-hidden="true"></span> @GetFormButtonLabel()
                </button>

                <button type="button" class="btn btn-outline-danger" @onclick="Cancelar">
                    <span class="oi oi-x" aria-hidden="true"></span> Cancelar
                </button>

            </div>
        </EditForm>
        <br />
    }
    @if (!ShowForm)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Direccion</th>
                    <th>Telefono</th>
                    <th>CorreoElectronico</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var producto in MyProperty)
                {
                    <tr>
                        <td>@producto.Nombre</td>
                        <td>@producto.Direccion</td>
                        <td>@producto.Telefono</td>
                        <td>@producto.CorreoElectronico</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => Seleccionar(producto.Id)">
                                <span class="oi oi-pencil"></span> Editar
                            </button>
                            <button @onclick="()=>Eliminar(producto)"
                                    class="btn btn-danger">
                                <span class="oi oi-trash"></span> Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code
{
    public bool ShowForm { get; set; } = false;
    public string Filtro { get; set; } = "";
    public List<ProveedorResponse> MyProperty { get; set; } = new List<ProveedorResponse>();
    public ProveedorRequest request { get; set; } = new ProveedorRequest();

    private string GetFormButtonLabel()
    {
        return request.Id == 0 ? "Agregar" : "Modificar";
    }

    // Función para limpiar el formulario
    void Cancelar()
    {
        request = new ProveedorRequest();
        ShowForm = false;
    }

    async Task CargarProveedores()
    {
        //Correciones
        var resultado = await ProveedorServices.Consultar();

        if (resultado.Success)
        {
            MyProperty = resultado.Data!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarProveedores();
    }

    // Método para agregar o actualizar el cliente
    public async Task EnviarCliente()
    {
        // Validar campos obligatorios
        if (string.IsNullOrWhiteSpace(request.Nombre) ||
            string.IsNullOrWhiteSpace(request.Direccion) ||
            string.IsNullOrWhiteSpace(request.Telefono) ||
            string.IsNullOrWhiteSpace(request.CorreoElectronico)
            )
        {
            // Mostrar mensaje de error si algún campo está vacío
            await MostrarMensajeError("Por favor completa todos los campos.");
            return;
        }

        // Mostrar mensaje de confirmación
        var confirmResult = await JSRuntime.InvokeAsync<bool>("confirm", new object?[] { "¿Estás seguro de realizar esta acción?" });

        if (confirmResult)
        {
            if (request.Id == 0)
            {
                // Registrar el cliente
                var r = await ProveedorServices.Crear(request);
                if (r.Success)
                {
                    Cancelar();
                    await CargarProveedores();
                    StateHasChanged();
                    // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                    await MostrarMensajeExito("El cliente se ha agregado correctamente.");
                }
            }
            else
            {
                // Actualizar el cliente
                //Corecciones
                var r = await ProveedorServices.Modificar(request.Id, request);


                if (r.Success)
                {
                    Cancelar();
                    await CargarProveedores();
                    StateHasChanged();
                    // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                    await MostrarMensajeExito("El cliente se ha actualizado correctamente.");
                }
                else if (request.Id < 0)
                {
                    // Eliminar el cliente

                    //Coreccion 
                    // Eliminar el cliente
                    // Corrección
                    var resultado = await ProveedorServices.Eliminar(request.Id);

                    if (resultado.Success)
                    {
                        Cancelar();
                        await CargarProveedores();
                        StateHasChanged();
                        // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                        await MostrarMensajeExito("El cliente se ha eliminado correctamente.");
                    }

                }
            }
        }
    }

    public void Seleccionar(int Id)
    {
        ShowForm = true;
        request = MyProperty.FirstOrDefault(c => c.Id == Id)?.ToRequest() ?? new ProveedorRequest();
    }

    private void MostrarFormulario()
    {
        ShowForm = true;
    }

    public async Task Eliminar(ProveedorResponse proveedor)
    {
        var confirmResult = await JSRuntime.InvokeAsync<bool>("confirm", new object?[] { "¿Estás seguro de eliminar este cliente?" });

        if (confirmResult)
        {
            //Correcion
            var resultado = await ProveedorServices.Eliminar(proveedor.Id);
            if (resultado.Success)
            {
                await CargarProveedores();
                StateHasChanged();
                // Mostrar mensaje de éxito utilizando una alerta de Bootstrap:
                await MostrarMensajeExito("El cliente se ha eliminado correctamente.");
            }
        }
    }

    private async Task MostrarMensajeExito(string mensaje)
    {
        await JSRuntime.InvokeVoidAsync("alert", mensaje);
    }

    private async Task MostrarMensajeError(string mensaje)
    {
        await JSRuntime.InvokeVoidAsync("alert", mensaje);
    }
}